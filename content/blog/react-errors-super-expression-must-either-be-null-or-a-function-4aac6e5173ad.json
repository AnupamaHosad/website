{
    "title": [
        "React Errors : Super expression must either be null or a function"
    ],
    "link": [
        "https://medium.com/@anuhosad/react-errors-super-expression-must-either-be-null-or-a-function-4aac6e5173ad?source=rss-bc5490c02ddb------2"
    ],
    "guid": [
        {
            "_": "https://medium.com/p/4aac6e5173ad",
            "$": {
                "isPermaLink": "false"
            }
        }
    ],
    "category": [
        "reactjs",
        "react",
        "javascript"
    ],
    "dc:creator": [
        "Anupama"
    ],
    "pubDate": [
        "Sat, 26 Jan 2019 14:40:50 GMT"
    ],
    "atom:updated": [
        "2019-01-26T14:54:19.695Z"
    ],
    "content:encoded": [
        "<h3>React Errors : <strong><em>Super expression must either be null or a function</em></strong></h3><p>Have you come across this error when working with React?</p><blockquote><strong>Uncaught TypeError: Super expression must either be null or a function, not undefined</strong></blockquote><p>If yes, then this post is for you!</p><p>Lets look at the culprits (that I have come across so far) that cause this error.</p><ol><li><strong>Forgotten export</strong><br>The first culprit is usually that you have forgotten to export the component that you are trying to use and hence React finds that the Component you are trying to extend from is undefined . This is an easy to find and fix issue.</li><li><strong>Using a default export incorrectly<br></strong>If a component is exported with the default keyword then it must be imported as a default import and not as a named import. <br>For example if your export statement is export default Foo, then the correct way to import this component is import Foo from &quot;./Foo&quot; and not import { Foo } from &quot;./Foo&quot; . The latter import statement is for named exports.</li><li><strong>Circular Dependencies<br></strong>This is a an often missed culprit which I came across recently in one of the projects I was working on. After going into the depths of the google search rabbit hole, I finally came across a stack overflow answer that shed some light on why I was still getting the error inspite of the component being exported / imported correctly.<br>If you have dependencies of a cyclic nature like shown below, it will result in this error:</li></ol><pre>class A extends B {}<br>class B extends C {}<br>class C extends A {}</pre><p>This of-course is a very simple case of a cyclic dependency, but in a medium to large size project it might be hidden deeply in the Component tree and thus hard to find.</p><p>Hope this post helped someone out there pulling their hair out trying to figure out how to solve this issue!</p><p>PS : There is a good chance that the “someone” would be me in the future still getting the same error and forgotten what the causes are :-P</p><img src=\"https://medium.com/_/stat?event=post.clientViewed&referrerSource=full_rss&postId=4aac6e5173ad\" width=\"1\" height=\"1\">"
    ]
}